//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spore_ModAPI_Easy_Installer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Spore_ModAPI_Easy_Installer.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copying file.
        /// </summary>
        internal static string CopyingFile {
            get {
                return ResourceManager.GetString("CopyingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file given is not supported. Only .sporemod, .package and .exe files are supported..
        /// </summary>
        internal static string ErrorUnsupportedFile {
            get {
                return ResourceManager.GetString("ErrorUnsupportedFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extracting file.
        /// </summary>
        internal static string ExtractingFile {
            get {
                return ResourceManager.GetString("ExtractingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Spore Mod (*.sporemod)|*.sporemod|Spore PACKAGE file (*.package)|*.package|All supported files|*.sporemod;*.package.
        /// </summary>
        internal static string FileChooserFilter {
            get {
                return ResourceManager.GetString("FileChooserFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Choose the mod to be installed.
        /// </summary>
        internal static string FileChooserTitle {
            get {
                return ResourceManager.GetString("FileChooserTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot; cancelled installation.
        /// </summary>
        internal static string InstallationCancelled {
            get {
                return ResourceManager.GetString("InstallationCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot; completed installation.
        /// </summary>
        internal static string InstallationCompleted {
            get {
                return ResourceManager.GetString("InstallationCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installing mod....
        /// </summary>
        internal static string InstallingModTitle {
            get {
                return ResourceManager.GetString("InstallingModTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mod &quot;.
        /// </summary>
        internal static string ModInstalled1 {
            get {
                return ResourceManager.GetString("ModInstalled1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot; has been installed successfully..
        /// </summary>
        internal static string ModInstalled2 {
            get {
                return ResourceManager.GetString("ModInstalled2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mod &quot;.
        /// </summary>
        internal static string ModIsInstalling1 {
            get {
                return ResourceManager.GetString("ModIsInstalling1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot; is being installed. Please, wait until it finishes..
        /// </summary>
        internal static string ModIsInstalling2 {
            get {
                return ResourceManager.GetString("ModIsInstalling2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mod &quot;.
        /// </summary>
        internal static string ModNotInstalled1 {
            get {
                return ResourceManager.GetString("ModNotInstalled1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot; could not be installed..
        /// </summary>
        internal static string ModNotInstalled2 {
            get {
                return ResourceManager.GetString("ModNotInstalled2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  cannot be installed, because it requires a greater version of the ModAPI Core DLLs.
        ///Please, restart the launcher and allow it to update..
        /// </summary>
        internal static string UnsupportedDllVersion {
            get {
                return ResourceManager.GetString("UnsupportedDllVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: mod cannot be installed.
        /// </summary>
        internal static string UnsupportedDllVersionTitle {
            get {
                return ResourceManager.GetString("UnsupportedDllVersionTitle", resourceCulture);
            }
        }
    }
}
